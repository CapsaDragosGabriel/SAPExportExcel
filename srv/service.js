/**
 * Code is auto-generated by Application Logic, DO NOT EDIT.
 * @version(2.0)
 */
const LCAPApplicationService = require('@sap/low-code-event-handler');
const priorityDelivery = require('./code/priorityDelivery');
const cds = require('@sap/cds');
const { Readable } = require('stream');
const XLSX = require('xlsx');

class TableExport extends LCAPApplicationService {
    async init() {
        const {Products}= this.entities;

        this.on('priorityDelivery','SrvProjection', async (req) => {

            console.log("action entered\n");
             
            return await priorityDelivery(req,this);
        });

        this.on('Export', async (req) => {

            console.log("EXPORT ACTION ENTERED");
            const products = await this.get('SrvProjection');
            console.log("PRODUCTS IN JSON FORMAT");
            console.log(JSON.stringify(products));           
            const worksheet = XLSX.utils.json_to_sheet(products);
            // Create a new workbook and append the worksheet
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "SrvProjection");
        
            // Export the workbook to Excel file

            const binaryString = XLSX.write(workbook, { bookType: 'xlsx', type: 'binary' });
            const buffer = Buffer.from(binaryString, 'binary');

            console.log("THIS A BUFFER");
            console.log(buffer);
            return buffer;
         //   res.setHeader('Content-Disposition', 'attachment; filename=Products.xlsx');
          //  res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            
            /*const csvHeaders = 'ID;Category;Priority;Department;ProductName;DeliveryDate;Cost\n';
            const csvRows = await products.map(p => `${p.ID};${p.Category};${p.Priority};${p.Department};${p.ProductName};${p.DeliveryDate};${p.Cost}`).join('\n')
            const csvContent=csvHeaders+csvRows;
            console.log("CSV CONTENT");
            console.log(csvContent);*/
           // return await priorityDelivery(req,this);
        });


        this.on('READ','SrvProjection', async (req,next) => {
      
            console.log("Req: "+req);
            console.log("line 40")
            console.log(req);
            console.log('READ event triggered');
            // Custom logic for READ operation
      
            return await next();
          });
      
        return super.init();
    }
}


module.exports = {
    TableExport
};